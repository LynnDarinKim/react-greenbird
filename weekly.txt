

week 1
configuration했다. (설치한것들 리스트 적기.)

nextjs 라우팅, 링크, 헤드 사용. ant design을 처음 사용해보았다.
prevState method

계획과 달라진 부분: 
강의가 기존 문법과 완전히 다른 문법을 사용해서(리액트 훅스, useState 등..) 따라가기에 부족한 부분이 있어서, 
새 문법을 프로젝트와 동시에 웹게임을 개발해서 연습해보기로 했다. 


week 2 ---------------------------------------------------------------------------

끝말잇기. 
webpack setting
client.jsx + WordRelay.jsx 를 합쳐서 하나의 소스로 만들어주고 (입력), app.js에 (출력)
웹팩으로 빌드하기 2-5, 2-6. 구구단 웹팩으로 빌드하기 

실시간 반영
2.word_chain$ npm i -D react-hot-loader
2.word_chain$ npm i -D webpack-dev-server/* 서버가 있어야 프론트엔드 코드의 변경점을 감지해서 자동으로 빌드도 해주고 변경사항도 바꿔준다. nodemon같은 것. */

숫자야구 - map함수의 키. key={}. key는 i를 넣을 수 있지만 이 인덱스만으로 키 하면 안됨!!
왜냐하면 나중에 성능 최적화 때 리액트가 key를 보고 같은 컴포넌트인지 아닌지를 판단하기 때문! 
(react가 key를 기준으로 엘리먼트를 추가하거나 수정, 삭제를 판단하기 때문에 배열의 순서가 바뀌면 문제가 생긴다. )
when you practice - top-down 
함수 로직 리뷰

inspect facebook structure built with react


main project -----
- 리액트가 전체 리렌더링 되는 것을, 컴포넌트별로 리렌더링 되도록 하기 (성능)
  pages/_app.js -> nextjs에서 다른 컴포넌트들이 부모로 자동 인식시켜준다. 
  Component = nextjs에서 사용하는 프롭명. 이걸 넣으면 부모 컴포넌트인 _app.js와 자식컴포넌트인 
  index.js, profile.js, signup.js 등이 합쳐진다.
    ex)_app.js에서 
      const NodeBird = ({ Component }) => {
        <AppLayout>
          <Component />
        </AppLayout>
      }

- prettier settings: https://medium.com/technical-credit/using-prettier-with-vs-code-and-create-react-app-67c2449b9d08, https://velog.io/@velopert/eslint-and-prettier-in-react

- nextjs structure:
  _document, _app, _error : next에 기본적으로 내장되어있는 페이지들인데, 우리가 직접 만들어주면 덮어씌울 수도 있다. 

pages/ // HTML Document, Application Container, 각종 페이지 등을 작성한다.
    _document.js // HTML Document. (html, head, body)
    _app.js // Application Container. 공통의 레이아웃을 작성한다.
    _error.js // Error Page.
    index.js // Root Page /로 시작되는 경로를 말한다.
    hello.js // Hello Page /hello로 시작되는 경로를 말한다.
    https://salgum1114.github.io/nextjs/2019-05-06-nextjs-static-website-1/

